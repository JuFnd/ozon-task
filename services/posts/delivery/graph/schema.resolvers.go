package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"ozon-task/services/posts/delivery/graph/model"
)

// MutationAddPost is the resolver for the mutationAddPost field.
func (r *mutationResolver) MutationAddPost(ctx context.Context, data string, isCommented *bool) (*model.Post, error) {
	return r.AddPost(ctx, data, *isCommented)
}

// MutationAddComment is the resolver for the mutationAddComment field.
func (r *mutationResolver) MutationAddComment(ctx context.Context, postID string, data string, parentID *string) (*model.Comment, error) {
	return r.AddComment(ctx, postID, data, parentID)
}

// QueryGetPosts is the resolver for the queryGetPosts field.
func (r *queryResolver) QueryGetPosts(ctx context.Context, limit *int, offset *int) ([]*model.Post, error) {
	return r.GetPosts(ctx, limit, offset)
}

// QueryGetPost is the resolver for the queryGetPost field.
func (r *queryResolver) QueryGetPost(ctx context.Context, id string) (*model.Post, error) {
	return r.GetPostByID(ctx, id)
}

// QueryGetComments is the resolver for the queryGetComments field.
func (r *queryResolver) QueryGetComments(ctx context.Context, postID string, limit, offset *int) ([]*model.Comment, error) {
	return r.GetCommentsByPostID(ctx, postID, limit, offset)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
